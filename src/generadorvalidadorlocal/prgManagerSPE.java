/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generadorvalidadorlocal;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.objects.NativeString;

/**
 *
 * @author subdireccion.tecnolo
 */
public class prgManagerSPE extends javax.swing.JFrame {

    String prmHostDB = "10.140.0.10";
    String prmPortDB = "1433";
    String prmBaseDB = "Res_129_2015";
    String prmUserDB = "GenCodRes_129";
    String prmPassDB = "14eb687c10SDyT2019";
    
    /**
     * Creates new form prgManagerSPE
     */
    public prgManagerSPE() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/Imagenes/favicon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCodigoVerificacion = new javax.swing.JTextField();
        txtCodigoPrestador = new javax.swing.JTextField();
        txtUsuarioSFTP = new javax.swing.JTextField();
        txtContrasegnaSFTP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCodigoVerificacion = new javax.swing.JButton();
        lblCodigoVerificacion = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblCodigoPrestador = new javax.swing.JLabel();
        lblUsuarioSFTP = new javax.swing.JLabel();
        lblContraSFTP = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        lblNombPrestador = new javax.swing.JLabel();
        txtBuscaPrestador = new javax.swing.JTextField();
        btnBuscarPrestador = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listPrestadores = new javax.swing.JTextArea();
        btnValidaConSFTP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtCodigoVerificacion.setEditable(false);
        txtCodigoVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoVerificacionActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo_spe.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Generador Validador Local");

        btnCodigoVerificacion.setText("Actualizar");
        btnCodigoVerificacion.setToolTipText("");
        btnCodigoVerificacion.setActionCommand("Registrar");
        btnCodigoVerificacion.setEnabled(false);
        btnCodigoVerificacion.setName("btvVerificar"); // NOI18N
        btnCodigoVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodigoVerificacionActionPerformed(evt);
            }
        });

        lblCodigoVerificacion.setText("Codigo de Verificación");

        jLabel4.setText("<html><b>Subdirección de Desarrollo y Tecnología</b><p>Ingrese el Código de Prestador del CIPRES</p></html>");

        lblCodigoPrestador.setText("Código Prestador");

        lblUsuarioSFTP.setText("Usuario SFTP");

        lblContraSFTP.setText("Contraseña");

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        lblNombPrestador.setText("Nombre Prestador");

        btnBuscarPrestador.setText("Buscar");
        btnBuscarPrestador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPrestadorActionPerformed(evt);
            }
        });

        listPrestadores.setEditable(false);
        listPrestadores.setColumns(20);
        listPrestadores.setRows(5);
        jScrollPane2.setViewportView(listPrestadores);

        btnValidaConSFTP.setText("Valida SFTP");
        btnValidaConSFTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidaConSFTPActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Todos los derechos reservados. Unidad del Servicio Público de Empleo.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblContraSFTP)
                    .addComponent(lblUsuarioSFTP)
                    .addComponent(lblCodigoVerificacion)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCodigoPrestador)
                        .addGap(4, 4, 4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCodigoVerificacion)
                        .addGap(273, 391, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCodigoVerificacion)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCodigoPrestador, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(txtUsuarioSFTP)
                            .addComponent(txtContrasegnaSFTP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnValidaConSFTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(101, 101, 101))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lblNombPrestador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBuscaPrestador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscarPrestador, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombPrestador)
                    .addComponent(txtBuscaPrestador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPrestador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigoPrestador)
                    .addComponent(txtCodigoPrestador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuarioSFTP)
                    .addComponent(txtUsuarioSFTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContraSFTP)
                    .addComponent(txtContrasegnaSFTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValidaConSFTP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigoVerificacion)
                    .addComponent(txtCodigoVerificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCodigoVerificacion)
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoVerificacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoVerificacionActionPerformed

    private void btnCodigoVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodigoVerificacionActionPerformed
        // TODO add your handling code here:
        String primeraPalabra, segundaPalabra, terceraPalabra, transformada;
        
        int primeraPos, segundaPos, terceraPos;

        try
        {
            if (txtCodigoPrestador.getText().length() == 0)
            {
                infoBox("Indique el código de prestador por favor ", "Mensaje Solicitud");
            }
            else if (txtUsuarioSFTP.getText().length() == 0)
            {
                infoBox("Indique el usuario de SFTP por favor ", "Mensaje Solicitud");
            }
            else if (txtContrasegnaSFTP.getText().length() == 0)
            {
                infoBox("Indique la contraseña de SFTP por favor ", "Mensaje Solicitud");
            }
            else{
                primeraPalabra = invertir(txtCodigoPrestador.getText());
                primeraPos = primeraPalabra.length();
                segundaPalabra = invertir(txtUsuarioSFTP.getText());
                segundaPos = segundaPalabra.length();
                terceraPalabra = invertir(txtContrasegnaSFTP.getText());
                terceraPos = terceraPalabra.length();
                transformada = padLeftZeros(Integer.toString(primeraPos),2)+primeraPalabra+padLeftZeros(Integer.toString(segundaPos),2)+segundaPalabra+padLeftZeros(Integer.toString(terceraPos),2)+terceraPalabra;
                transformada = corrimientoCifrado(transformada);

                txtCodigoVerificacion.setText(transformada);
                
                AlmacenaDB(primeraPalabra, segundaPalabra, terceraPalabra, transformada);
                
            }
        }
        catch(Exception ex)
        {
            infoBox("La información ingresada presenta novedades.", "Error");
        }
    }//GEN-LAST:event_btnCodigoVerificacionActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        
        String CodPrestador = "";
        
        if (txtCodigoPrestador.getText().length() == 0)
        {
            infoBox("Indique el código de prestador por favor ", "Mensaje Solicitud");
        }else{
            CodPrestador = txtCodigoPrestador.getText();
            ConsultaDB(CodPrestador);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnBuscarPrestadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPrestadorActionPerformed
        ConsultaPrestador(txtBuscaPrestador.getText());
    }//GEN-LAST:event_btnBuscarPrestadorActionPerformed

    private void btnValidaConSFTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidaConSFTPActionPerformed
        validaConSFTP();       
    }//GEN-LAST:event_btnValidaConSFTPActionPerformed

    private void validaConSFTP() {                                                 
        String host = "ftp.serviciodeempleo.gov.co";
        String username, password;
        
        if (txtCodigoPrestador.getText().length() == 0)
        {
            infoBox("Indique el código de prestador por favor ", "Mensaje Solicitud");
        }
        else if (txtUsuarioSFTP.getText().length() == 0)
        {
            infoBox("Indique el usuario de SFTP por favor ", "Mensaje Solicitud");
        }
        else if (txtContrasegnaSFTP.getText().length() == 0)
        {
            infoBox("Indique la contraseña de SFTP por favor ", "Mensaje Solicitud");
        }
        else{
            
            username = txtUsuarioSFTP.getText();
            password = txtContrasegnaSFTP.getText();
            
            try
            {
                JSch jsch = new JSch();
                Session session = jsch.getSession(username, host, 22022);
                session.setPassword(password);
                java.util.Properties config = new java.util.Properties();
                config.put("StrictHostKeyChecking", "no");
                session.setConfig(config);
                session.connect();
                ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");

                sftpChannel.connect();                            
                sftpChannel.exit();
                session.disconnect();
                
                infoBox("Acceso SFTP autenticado con EXITO", "Mensaje");
                
                btnCodigoVerificacion.setEnabled(true);
            }
            catch(JSchException ex)
            {
                infoBox(ex.getMessage()+ "\n\r" + "\n\r" + LocalDate.now(),"Mensaje Error");
            }

        }
    
    }   
    
    private void AlmacenaDB(String CodPrestador, String UsuSFTP, String PassSFTP, String CodigoSeguridad){
            
        String prmConnec = "jdbc:sqlserver://"+prmHostDB+":"+prmPortDB+";databaseName="+prmBaseDB+
            ";user="+prmUserDB+";password="+prmPassDB+";";
        
        String retID, retCodigo_Plataforma, retCodigo_004, retEstado, retUsuarioSFTP, retContrasenaSFTP, retCodigoVerificacion;
        
        retID = "";
        retCodigo_Plataforma = "";
        retCodigo_004 = "";
        retEstado = "";
        retUsuarioSFTP = "";
        retContrasenaSFTP = "";
        retCodigoVerificacion = "";
        
        CodPrestador = invertir(CodPrestador);
        UsuSFTP = invertir(UsuSFTP);
        PassSFTP = invertir(PassSFTP);
        
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");            
            try (java.sql.Connection con = DriverManager.getConnection(prmConnec); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(
                    "SELECT ID, Codigo_Plataforma, Codigo_004, Estado, UsuarioSFTP, ContrasenaSFTP, CodigoVerificacion\n" +
                            "FROM Prestador a\n" +
                            "WHERE ID = '" + CodPrestador + "'")) {
                
                while (rs.next()) {
                    retID = rs.getString("ID");
                    retCodigo_Plataforma = rs.getString("Codigo_Plataforma");
                    retCodigo_004 = rs.getString("Codigo_004");
                    retEstado = rs.getString("Estado");
                    retUsuarioSFTP = rs.getString("UsuarioSFTP");
                    retContrasenaSFTP = rs.getString("ContrasenaSFTP");
                    retCodigoVerificacion = rs.getString("CodigoVerificacion");
                }
                
                rs.close();
                stmt.close();
                
                if(retID.equals(""))
                {
                    infoBox("El código de prestador no existe, por favor verifique","Mensaje de Error");
                }else{
                    if(retCodigoVerificacion.equals("")){
                        /*Se actualiza la informacion de SFTP y código de seguridad sólo si está en blanco*/
                        String updQuery = "UPDATE Prestador\n" +
                                "SET UsuarioSFTP = ?, ContrasenaSFTP = ?, CodigoVerificacion = ?\n" +
                                "WHERE ID = ?";
                        try (PreparedStatement ps = con.prepareStatement(updQuery)) {
                            ps.setString(1,UsuSFTP);
                            ps.setString(2,PassSFTP);
                            ps.setString(3,CodigoSeguridad);
                            ps.setString(4,CodPrestador);

                            ps.executeUpdate();
                            ps.close();
                        }
                        
                        infoBox("Información actualizada con éxito","Mensaje");
                    }else{
                        infoBox("Información ya almacenada","Mensaje");
                    }
                }
                
                con.close();
            }
            
        }
        catch(SQLException | ClassNotFoundException sqle) {
            infoBox(sqle.getMessage(),"Mensaje de Error");
        }
        
    }
    
    private void ConsultaDB(String CodPrestador){
        
        String prmConnec = "jdbc:sqlserver://"+prmHostDB+":"+prmPortDB+";databaseName="+prmBaseDB+";user="+prmUserDB+";password="+prmPassDB+";";
        
        String retID, retUsuarioSFTP, retContrasenaSFTP, retCodigoVerificacion, nombPrestador;
        
        retUsuarioSFTP = "";
        retContrasenaSFTP = "";
        retCodigoVerificacion = "";
        nombPrestador = "";
        
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");            
            try (java.sql.Connection con = DriverManager.getConnection(prmConnec); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(
                    "SELECT ID, Nombre_Prestador, UsuarioSFTP, ContrasenaSFTP, CodigoVerificacion\n" +
                            "FROM Prestador a\n" +
                            "WHERE ID = '" + CodPrestador + "'")) {
                
                while (rs.next()) {
                    retID = rs.getString("ID");
                    nombPrestador = rs.getString("Nombre_Prestador");
                    retUsuarioSFTP = rs.getString("UsuarioSFTP");
                    retContrasenaSFTP = rs.getString("ContrasenaSFTP");
                    retCodigoVerificacion = rs.getString("CodigoVerificacion");
                }
                
                rs.close();
                stmt.close();
                con.close();
            }
        }
        catch(SQLException | ClassNotFoundException sqle) {
            infoBox(sqle.getMessage(),"Mensaje de Error");
        }
        
        txtUsuarioSFTP.setText(retUsuarioSFTP);
        txtContrasegnaSFTP.setText(retContrasenaSFTP);
        txtCodigoVerificacion.setText(retCodigoVerificacion);
        
        /*No se encuentra el Prestador*/
        if(retUsuarioSFTP == null){
            infoBox("Para el prestador "+CodPrestador+" - "+nombPrestador+" no hay credenciales almacenadas", "Mensaje Solicitud");     
        }
        
        /*No se encuentra información de autenticación del Prestador*/
        if("".equals(retUsuarioSFTP)){
            infoBox("No se encuentran resultados para la búsqueda", "Mensaje Solicitud");     
        }
    }
    
    private void ConsultaPrestador(String NombrePrestador){
        
        String prmConnec = "jdbc:sqlserver://"+prmHostDB+":"+prmPortDB+";databaseName="+prmBaseDB+";user="+prmUserDB+";password="+prmPassDB+";";
        
        String retID, nombPrestador;
        
        listPrestadores.setText("");
        
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");            
            try (java.sql.Connection con = DriverManager.getConnection(prmConnec); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(
                    "SELECT ID, Nombre_Prestador FROM Prestador WHERE Nombre_Prestador LIKE '%"+NombrePrestador+"%'")) {
                
                while (rs.next()) {
                    retID = rs.getString("ID");
                    nombPrestador = rs.getString("Nombre_Prestador");  
                    if("".equals(listPrestadores.getText())){
                        listPrestadores.setText(System.lineSeparator() + retID + " - " + nombPrestador);
                    }
                    else{
                        listPrestadores.setText(listPrestadores.getText() + System.lineSeparator() + retID + " - " + nombPrestador);
                    }                    
                }
                
                rs.close();
                stmt.close();
                con.close();
            }
        }
        catch(SQLException | ClassNotFoundException sqle) {
            infoBox(sqle.getMessage(),"Mensaje de Error");
        }
        
        if("".equals(listPrestadores.getText())){
            infoBox("No se encuentran resultados para la búsqueda", "Mensaje Solicitud");     
        }
    }
    
    public String padLeftZeros(String inputString, int length) {
        if (inputString.length() >= length) {
            return inputString;
        }
        StringBuilder sb = new StringBuilder();
        while (sb.length() < length - inputString.length()) {
            sb.append('0');
        }
        sb.append(inputString);

        return sb.toString();
    }
    
    private String corrimientoCifrado(String sCadena)
    {
        String sNuevaCadena = "";
        int largo = sCadena.length();
        int valAscii = 0;
        String letra = "";
        String letraTransformada = "";
        int AsciiControl = 0;
        int control = -15;

        String[] caracterOriginal = { "!", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~" };
        String[] caracterEquivalente = { "m", "r", "o", "C", "B", "s", "7", "~", "d", "e", "g", "(", "=", "^", "M", "?", "-", "*", "#", "j", ">", "w", "W", "!", "f", "a", "u", "v", "3", "`", "'", "4", ")", "Q", "U", "[", "9", "L", "O", ",", "c", "0", "1", "8", "Y", "<", ";", "\\", "$", "E", "A", "n", "D", "h", "k", "J", "+", "5", "@", "/", "6", ":", "P", "2", "V", "y", "I", "R", "&", "F", "]", "S", "N", "b", "X", "{", "%", "p", "|", "Z", "H", "x", "G", "q", "l", ".", "K", "i", "t", "z", "}", "_", "T" };

        try
        {
            for (int porlettra = 0; porlettra < largo; porlettra++)
            {
                letra = NativeString.substring(sCadena,porlettra, porlettra + 1);
                for (int recorreArreglo = 0; recorreArreglo < 93; recorreArreglo++)
                {
                    if (letra.equals(caracterOriginal[recorreArreglo])) 
                    {
                        letraTransformada = caracterEquivalente[recorreArreglo].toString();
                        break;
                    }
                }
                sNuevaCadena = sNuevaCadena.toString() + letraTransformada.toString();
            }
        }
        catch (Exception ex)
        {
            sNuevaCadena = ex.getMessage();
            infoBox(sNuevaCadena, "Mensaje de Error");
        }
        return sNuevaCadena;
    }
    
    private String invertir(String sCadena)
    {
        int largo = sCadena.length();
        String sNuevaCadena = "";
        try
        {
            for (int porlettra = 1; porlettra <= largo; porlettra++)
            {
                sNuevaCadena = sNuevaCadena + NativeString.substring(sCadena,largo - porlettra,largo - porlettra + 1);
            }
        }
        catch (Exception ex)
        {
            infoBox(ex.getMessage(),"Mensaje de Error");
        }

        return sNuevaCadena;
    }
    
    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prgManagerSPE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prgManagerSPE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prgManagerSPE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prgManagerSPE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new prgManagerSPE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPrestador;
    private javax.swing.JButton btnCodigoVerificacion;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnValidaConSFTP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCodigoPrestador;
    private javax.swing.JLabel lblCodigoVerificacion;
    private javax.swing.JLabel lblContraSFTP;
    private javax.swing.JLabel lblNombPrestador;
    private javax.swing.JLabel lblUsuarioSFTP;
    private javax.swing.JTextArea listPrestadores;
    private javax.swing.JTextField txtBuscaPrestador;
    private javax.swing.JTextField txtCodigoPrestador;
    private javax.swing.JTextField txtCodigoVerificacion;
    private javax.swing.JTextField txtContrasegnaSFTP;
    private javax.swing.JTextField txtUsuarioSFTP;
    // End of variables declaration//GEN-END:variables
}
